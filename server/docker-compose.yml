version: '3.8'

services:
  meshchat-server:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: meshchat-server
    restart: unless-stopped
    ports:
      - "8080:8080"  # MeshChat TCP port
      - "9090:9090"  # Metrics/Health check port
    environment:
      # Server configuration
      - MESHCHAT_HOST=0.0.0.0
      - MESHCHAT_PORT=8080
      - MESHCHAT_MAX_CONNECTIONS=1000
      
      # Database configuration (using PostgreSQL)
      - DB_DRIVER=org.postgresql.Driver
      - DB_URL=jdbc:postgresql://postgres:5432/meshchat
      - DB_USERNAME=meshchat
      - DB_PASSWORD=secure_password_change_me
      
      # Monitoring
      - METRICS_HOST=0.0.0.0
      - METRICS_PORT=9090
      - LOG_LEVEL=INFO
      
      # JVM options
      - JAVA_OPTS=-Xms512m -Xmx2g -XX:+UseG1GC
    volumes:
      - meshchat_data:/app/data
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
    networks:
      - meshchat-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9090/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  postgres:
    image: postgres:15-alpine
    container_name: meshchat-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=meshchat
      - POSTGRES_USER=meshchat
      - POSTGRES_PASSWORD=secure_password_change_me
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - meshchat-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U meshchat"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: meshchat-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass secure_redis_password_change_me
    volumes:
      - redis_data:/data
    networks:
      - meshchat-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  nginx:
    image: nginx:alpine
    container_name: meshchat-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - meshchat-server
    networks:
      - meshchat-network

  prometheus:
    image: prom/prometheus:latest
    container_name: meshchat-prometheus
    restart: unless-stopped
    ports:
      - "9091:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - meshchat-network

  grafana:
    image: grafana/grafana:latest
    container_name: meshchat-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin_password_change_me
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - meshchat-network

volumes:
  meshchat_data:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  meshchat-network:
    driver: bridge